{"version":3,"sources":["containers/Home.js","actions/types.js","actions/auth.js","containers/Login.js","containers/Signup.js","containers/Activate.js","containers/ResetPassword.js","containers/ResetPasswordConfirm.js","reducers/auth.js","reducers/index.js","store.js","components/Navbar.js","hocs/Layout.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","heroContent","backgroundColor","padding","spacing","heroButtons","marginTop","Home","classes","className","Container","maxWidth","align","Typography","component","variant","color","gutterBottom","paragraph","Grid","container","justify","item","Button","Link","to","LOGIN_SUCCESS","LOGIN_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","LOGOUT","load_user","dispatch","a","localStorage","getItem","config","headers","axios","get","process","res","console","log","data","type","payload","root","alignItems","formWidth","width","margin","loginButton","connect","state","isAuthenticated","auth","login","email","password","body","JSON","stringify","post","useState","formData","setFormData","onChange","e","target","name","value","style","marginBottom","onSubmit","preventDefault","noValidate","autoComplete","FormControl","InputLabel","htmlFor","Input","id","placeholder","aria-describedby","required","FormHelperText","minLength","signupButton","signup","re_password","setAccountCreated","title","verifyButton","verify","uid","token","match","verified","setVerified","onClick","params","reset_password","requestSent","setRequestSent","reset_password_confirm","new_password","re_new_password","initialState","access","refresh","user","combineReducers","action","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","flexGrow","navLink","logout","AppBar","position","Toolbar","NavLink","checkAuthenticatd","code","props","useEffect","children","App","exact","path","Login","Signup","ResetPassword","ResetPasswordConfirm","Activate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b9b5a1b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    heroContent: {\n      backgroundColor: '#bbdefb',\n      padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n      marginTop: theme.spacing(4),\n    },\n}));\n\n\nconst Home = () => {\n    const classes = useStyles();\n    return(\n        <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\" align=\"center\">\n                <Typography component=\"h1\" variant=\"h2\" color=\"textPrimary\" gutterBottom>\n                    中国語のおTomo!\n                </Typography>\n                <Typography variant=\"body1\" color=\"textSecondary\" paragraph>\n                    中国語の初学者が上級者になるまでの学習法、教材、講義、さらには学習継続のためのペースメーカーに至るまでがここに！\n                </Typography>\n                <div className={classes.heroButtons}>\n                    <Grid container spacing={2} justify=\"center\">\n                        <Grid item>\n                            <Button variant=\"outlined\" color=\"primary\" component={Link} to=\"/login\">\n                                Login\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Container>\n        </div>\n    );\n};\n\nexport default Home;\n\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const SIGNUP_SUCCESS = 'LOGIN_SUCCESS';\nexport const SIGNUP_FAIL = 'LOGIN_FAIL';\nexport const ACTIVATION_SUCCESS = 'LOGIN_SUCCESS';\nexport const ACTIVATION_FAIL = 'LOGIN_FAIL';\nexport const USER_LOADED_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const USER_LOADED_FAIL = 'LOAD_USER_FAIL';\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS';\nexport const AUTHENTICATED_FAIL = 'AUTHENTICATED_FAIL';\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS';\nexport const PASSWORD_RESET_FAIL = 'PASSWORD_RESET_FAIL';\nexport const PASSWORD_RESET_CONFIRM_SUCCESS = 'PASSWORD_RESET_CONFIRM_SUCCESS';\nexport const PASSWORD_RESET_CONFIRM_FAIL = 'PASSWORD_RESET_CONFIRM_FAIL';\nexport const LOGOUT = 'LOGOUT';","import axios from 'axios';\n\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    LOGOUT,\n} from './types';\n\nexport const checkAuthenticatd = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        };\n\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS,\n                });\n            }\n        } catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL,\n            });\n        }\n    } else {\n        dispatch({\n            type: AUTHENTICATED_FAIL,\n        });\n    }\n};\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json',\n            }\n        };   \n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n            console.log(res.data);\n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data,\n            });\n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL,\n            });\n        }    \n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL,\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data,\n        });\n\n        dispatch(load_user());\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL,\n        });\n    }\n\n};\n\nexport const signup = (name, email, password, re_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ name, email, password, re_password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data,\n        });\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL,\n        });\n    }\n    \n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n    \n    const body = JSON.stringify({ uid, token });\n    \n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL,\n        });\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    \n    const body = JSON.stringify({ email });\n    \n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n        dispatch({\n            type: PASSWORD_RESET_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_FAIL\n        })\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = email => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n};","import React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { login } from '../actions/auth';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '5px',\n        alignItems: 'center',\n    },\n    heroContent: {\n        backgroundColor: '#bbdefb',\n        padding: theme.spacing(8, 0, 6),\n    },\n    formWidth: {\n        width: '400px',\n        margin: '15px',\n        \n    },\n    loginButton: {\n        width: '200px',\n        margin: '20px',\n    },\n  }));\n\nconst Login = ({ login, isAuthenticated }) => {\n    const classes = useStyles();\n\n    const [formData, setFormData] = useState({\n        email: '',\n        password: '',\n    });\n\n    const { email ,password } = formData;\n\n    const onChange  = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n        login(email, password);\n    };\n    // is the user authenticated?\n    //  Redirect them to the home page\n    if (isAuthenticated) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\" align=\"center\">\n\n                <Typography variant=\"h2\" style={{ marginBottom: '40px' }}>\n                    Sign In\n                </Typography>\n                <form \n                    onSubmit={e => onSubmit(e)}\n                    className={classes.root} \n                    noValidate \n                    autoComplete=\"off\"\n                >\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Email</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                value={email}\n                                onChange={e => onChange(e)}\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Password</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder=\"Password\"\n                                value={password}\n                                onChange={e => onChange(e)}\n                                minLength=\"6\"\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Button\n                        className={classes.loginButton}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >\n                        Login\n                    </Button>\n                    <Typography variant=\"body2\">\n                        Don't have an account? <Link to=\"/signup\">Sign Up</Link>\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Forgot your password? <Link to=\"/reset-password\">Reset Password</Link>\n                    </Typography>\n                </form>\n            </Container>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps, { login })(Login);","import React, { useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { reset_password, signup } from '../actions/auth';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '5px',\n        alignItems: 'center',\n    },\n    heroContent: {\n        backgroundColor: '#bbdefb',\n        padding: theme.spacing(8, 0, 6),\n    },\n    formWidth: {\n        width: '400px',\n        margin: '15px',\n        \n    },\n    signupButton: {\n        width: '200px',\n        margin: '20px',\n    },\n  }));\n\nconst Signup = ({ signup, isAuthenticated }) => {\n    const classes = useStyles();\n\n    const [accountCreated, setAccountCreated] = useState(false);\n    const [formData, setFormData] = useState({\n        name: '',\n        email: '',\n        password: '',\n        re_password: '',\n    });\n\n    const { name, email, password, re_password } = formData;\n\n    const onChange  = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n        if (password === re_password) {\n            signup(name, email, password, re_password); \n            setAccountCreated(true);\n        }\n    };\n    // is the user authenticated?\n    //  Redirect them to the home page\n    if (isAuthenticated) {\n        return <Redirect to='/' />\n    }\n    // if (accountCreated) {\n    //     return <Redirect to='/login' />\n    // }\n\n    return (\n        <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\" align=\"center\">\n\n                <Typography variant=\"h2\" style={{ marginBottom: '40px' }}>\n                    Sign up\n                </Typography>\n                <form \n                    onSubmit={e => onSubmit(e)}\n                    className={classes.root} \n                    noValidate \n                    autoComplete=\"off\"\n                >\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Name</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"text\"\n                                name=\"name\"\n                                placeholder=\"Name*\"\n                                value={name}\n                                onChange={e => onChange(e)}\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Email</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"Email*\"\n                                value={email}\n                                onChange={e => onChange(e)}\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Password</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder=\"Password*\"\n                                value={password}\n                                onChange={e => onChange(e)}\n                                minLength=\"6\"\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Confirm Password</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"password\"\n                                name=\"re_password\"\n                                placeholder=\"Confirm Password*\"\n                                value={re_password}\n                                onChange={e => onChange(e)}\n                                minLength=\"6\"\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Button\n                        // onClick={onSubmit}\n                        className={classes.signupButton}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >\n                        Register\n                    </Button>\n                    <Typography variant=\"body2\">\n                        Already have an account? <Link to=\"/login\">Sign In</Link>\n                    </Typography>\n                </form>\n            </Container>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps, { signup })(Signup);","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { verify } from '../actions/auth';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '5px',\n        alignItems: 'center',\n    },\n    heroContent: {\n        backgroundColor: '#bbdefb',\n        padding: theme.spacing(8, 0, 6),\n    },\n    title: {\n        marginBottom: '20px',\n        \n    },\n    verifyButton: {\n        width: '200px',\n        margin: '20px',\n    },\n  }));\n\nconst Activate = ({ verify, match }) => {\n    const classes = useStyles();\n\n    const [verified, setVerified] = useState(false);\n\n    const verify_account = e => {\n        const uid = match.params.uid;\n        const token = match.params.token;\n\n        verify(uid, token);\n        setVerified(true);\n    };\n\n    if (verified) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\" align=\"center\">\n                <Typography variant=\"h3\" component=\"h3\" className={classes.title}>\n                    Verify your Account\n                </Typography>\n                <Button\n                    className={classes.verifyButton}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    onClick={verify_account}\n                >\n                    Verify\n                </Button>\n            </Container>\n        </div>\n    );\n};\n\nexport default connect(null, { verify })(Activate);","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { reset_password } from '../actions/auth';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '5px',\n        alignItems: 'center',\n    },\n    heroContent: {\n        backgroundColor: '#bbdefb',\n        padding: theme.spacing(8, 0, 6),\n    },\n    formWidth: {\n        width: '400px',\n        margin: '15px',\n        \n    },\n    loginButton: {\n        width: '200px',\n        margin: '20px',\n    },\n  }));\n\nconst ResetPassword = ({ reset_password }) => {\n    const classes = useStyles();\n\n    const [requestSent, setRequestSent] = useState(false);\n    const [formData, setFormData] = useState({\n        email: '',\n    });\n\n    const { email } = formData;\n\n    const onChange  = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n        reset_password(email);\n        setRequestSent(true);\n    };\n    // is the user authenticated?\n    //  Redirect them to the home page\n    if (requestSent) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\" align=\"center\">\n\n                <Typography variant=\"h2\" style={{ marginBottom: '40px' }}>\n                    Request Password Reset\n                </Typography>\n                <form \n                    onSubmit={e => onSubmit(e)}\n                    className={classes.root} \n                    noValidate \n                    autoComplete=\"off\"\n                >\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Email</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                value={email}\n                                onChange={e => onChange(e)}\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Button\n                        className={classes.loginButton}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >\n                        Reset Password\n                    </Button>\n                </form>\n            </Container>\n        </div>\n    );\n};\n\nexport default connect(null, { reset_password })(ResetPassword);","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { reset_password_confirm } from '../actions/auth';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '5px',\n        alignItems: 'center',\n    },\n    heroContent: {\n        backgroundColor: '#bbdefb',\n        padding: theme.spacing(8, 0, 6),\n    },\n    formWidth: {\n        width: '400px',\n        margin: '15px',\n        \n    },\n    loginButton: {\n        width: '200px',\n        margin: '20px',\n    },\n  }));\n\nconst ResetPasswordConfirm = ({ match, reset_password_confirm }) => {\n    const classes = useStyles();\n\n    const [requestSent, setRequestSent] = useState(false);\n    const [formData, setFormData] = useState({\n        new_password: '',\n        re_new_password: '',\n    });\n\n    const { new_password, re_new_password } = formData;\n\n    const onChange  = e => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    const onSubmit = e => {\n        e.preventDefault();\n        \n        const uid = match.params.uid;\n        const token = match.params.token;\n\n        reset_password_confirm(uid, token, new_password, re_new_password);\n        setRequestSent(true);\n    };\n    // is the user authenticated?\n    //  Redirect them to the home page\n    if (requestSent) {\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div className={classes.heroContent}>\n            <Container maxWidth=\"sm\" align=\"center\">\n                <form \n                    onSubmit={e => onSubmit(e)}\n                    className={classes.root} \n                    noValidate \n                    autoComplete=\"off\"\n                >\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">New Password</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"password\"\n                                name=\"new_password\"\n                                placeholder=\"New Password\"\n                                value={new_password}\n                                onChange={e => onChange(e)}\n                                minLength=\"6\"\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid>\n                        <FormControl className={classes.formWidth}>\n                            <InputLabel htmlFor=\"component-helper\">Confirm New Password</InputLabel>\n                            <Input\n                                id=\"component-helper\"\n                                type=\"password\"\n                                name=\"re_new_password\"\n                                placeholder=\"Confirm New Password\"\n                                value={re_new_password}\n                                onChange={e => onChange(e)}\n                                minLength=\"6\"\n                                aria-describedby=\"component-helper-text\"\n                                required\n                            />\n                            <FormHelperText id=\"component-helper-text\">Some important helper text</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Button\n                        className={classes.loginButton}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >\n                        Reset Password\n                    </Button>\n                </form>\n            </Container>\n        </div>\n    );\n};\n\nexport default connect(null, { reset_password_confirm })(ResetPasswordConfirm);","import {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    LOGOUT,\n} from '../actions/types';\n\nconst initialState = {\n    access: localStorage.getItem('access'),\n    refresh: localStorage.getItem('refresh'),\n    isAuthenticated: null,\n    user: null,\n};\n\nexport default function(state = initialState, action) {\n    const { type, payload } = action;\n\n    switch(type) {\n        case AUTHENTICATED_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: true,\n            }\n        case LOGIN_SUCCESS:\n            localStorage.setItem('access', payload.access);\n            return {\n                ...state,\n                isAuthenticated: true,\n                access: payload.access,\n                refresh: payload.refresh,\n            }\n        case SIGNUP_SUCCESS:\n            return {\n                ...state,\n                isAuthenticated: false,\n            }\n        case USER_LOADED_SUCCESS:\n            return {\n                ...state,\n                user: payload,\n            }\n        case AUTHENTICATED_FAIL:\n            return {\n                ...state,\n                isAuthenticated: false,\n            }\n        case USER_LOADED_FAIL:\n            return {\n                ...state,\n                user: null,\n            }\n        case LOGIN_FAIL:\n        case SIGNUP_FAIL:\n        case LOGOUT:\n            localStorage.removeItem('access');\n            localStorage.removeItem('refresh');\n            return {\n                ...state,\n                access: null,\n                refresh: null,\n                isAuthenticated: false,\n                user: null,\n            }\n        case PASSWORD_RESET_SUCCESS:\n        case PASSWORD_RESET_FAIL:\n        case PASSWORD_RESET_CONFIRM_SUCCESS:\n        case PASSWORD_RESET_CONFIRM_FAIL:\n        case ACTIVATION_SUCCESS:\n        case ACTIVATION_FAIL:\n            return {\n                ...state,\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from  'redux';\nimport auth from './auth';\n\nexport default combineReducers({\n    auth\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import React, { Fragment } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nimport { connect } from 'react-redux';\nimport { logout } from '../actions/auth';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n      },\n    navLink: {\n        color: \"black\",\n  },\n}));\n\nconst Navbar = ({ logout, isAuthenticated }) => {\n  const classes = useStyles();\n\n  const guestLinks = () => (\n      <Fragment>\n        <Button\n            component={NavLink}\n            className={classes.navLink}\n            to='/login'\n            style={{color: '#fafafa'}}\n        >\n            Login\n        </Button>\n        <Button\n            component={NavLink}\n            className={classes.navLink}\n            to='/signup'\n            style={{color: '#fafafa'}}\n        >\n            Signup\n        </Button>\n      </Fragment>\n  );\n\n  const authLinks = () => (\n    <Fragment>\n        <Button\n            onClick={logout}\n            className={classes.navLink}\n            style={{color: '#fafafa'}}\n        >\n            Logout\n        </Button>\n    </Fragment>\n  );\n\n  return (\n    <div className={classes.root}>\n        <AppBar position=\"static\" style={{backgroundColor: '#64b5f6', marginBottom: '1px'}}>\n            <Toolbar>\n                <Button\n                    component={NavLink}\n                    className={classes.navLink}\n                    to='/'\n                    style={{color: '#fafafa'}}\n                    >\n                    Home\n                </Button>\n                {isAuthenticated ? authLinks() : guestLinks()}\n            </Toolbar>\n        </AppBar>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { logout })(Navbar);","import React, { useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport { connect } from 'react-redux';\nimport { checkAuthenticatd, load_user } from '../actions/auth'\nconst Layout = (props) => {\n    useEffect(() => {\n        props.checkAuthenticatd();\n        props.load_user();\n    }, []);\n\n    return (\n        <div>\n            <Navbar />\n            {props.children}\n        </div>\n    );\n};\n\nexport default connect(null, { checkAuthenticatd, load_user })(Layout);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from './containers/Home'\nimport Login from './containers/Login'\nimport Signup from './containers/Signup'\nimport Activate from './containers/Activate'\nimport ResetPassword from './containers/ResetPassword'\nimport ResetPasswordConfirm from './containers/ResetPasswordConfirm'\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nimport Layout from './hocs/Layout';\n\nconst App = () => (\n    <Provider store={store}>\n        <Router>\n            <Layout>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route exact path='/login' component={Login} />\n                    <Route exact path='/signup' component={Signup} />\n                    <Route exact path='/reset-password' component={ResetPassword} />\n                    <Route exact path='/password/reset/confirm/:uid/:token' component={ResetPasswordConfirm} />\n                    <Route exact path='/activate/:uid/:token' component={Activate} />\n                </Switch>\n            </Layout>\n        </Router>\n    </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}